### What is ubus in OpenWrt?

**ubus** (Micro Bus) is a messaging system used in OpenWrt 
to facilitate communication between different services, 
processes, or components running on the system. 
It acts as a central hub that allows these entities to 
communicate with each other in a standardized way.

### Analogy

Imagine ubus as the central post office in a city. 
In this city, each service or process 
(like network management, firewall settings, etc.)
 is like a different business or individual. 

- Without ubus: 
If these businesses need to exchange information, 
they would have to communicate directly, 
each creating its own communication channel, 
which could become complicated and inefficient.
  
- With ubus: Instead of direct communication, 
every business sends its message 
(e.g., requests, commands) to the post office (ubus). 
The post office then delivers the message to the intended recipient, 
making communication easier, more organized, and scalable.

### Example

Suppose you have three services running on OpenWrt: 
Service A(a network manager), 
Service B (a firewall), and 
Service C (a system logger).

- Scenario without ubus: 
  - Service A needs to communicate with 
  Service B and Service C. 
  - Service B also needs to communicate with Service C.
  - Each service would need to establish direct 
  communication channels, so you'd have 3 separate 
  communication pathways.
  
- Scenario with ubus: 
  - Service A sends a message to "ubus" requesting an action 
  from Service B.
  - ubus receives the message and delivers it to Service B**.
  - If **Service C** needs to log the action, **ubus** 
  can notify **Service C** without requiring **Service A** 
  to directly contact **Service C**.
  
By using ubus, the communication is reduced to a central 
hub that handles all messaging. 
This simplifies the system architecture and reduces the 
complexity of inter-process communication.

Quantitative Impact:  
- Without ubus: You might need 3 direct connections.
- With ubus: You only need 2 connections 
(each service to ubus), regardless of the number of 
services that need to communicate.

This centralized communication reduces complexity and 
makes it easier to scale the system as more 
services are added.



Basic example of how to use `ubus` in OpenWrt 
to interact with a service.

### Scenario

Let's say you want to interact with the network service on your OpenWrt 
device to get the status of a specific network interface, 
such as `eth0`.

### Steps to Use `ubus`

1. List Available Services

   First, you can list all the available services registered 
   with `ubus` (bash):
   
   ubus list
   
   This command will display a list of all services that you can interact 
   with through `ubus`. 
   For example, you might see services like 
   `network.interface`, 
   `system`, 
   etc.

2. Get Information About a Specific Service

   To see the available methods and information about 
   a specific service, such as `network.interface`, you can run:

   ubus -v list network.interface

   This will give you detailed information about the methods you 
   can call and the parameters required.

3. Call a Method to Get Interface Status

   Now, let's say you want to get the status of 
   the `eth0` interface. 
   You can do this using the `status` method on 
   the `network.interface` service:

      ubus call network.interface status '{"interface":"eth0"}'
   
   This command will return a JSON object with the status 
   of the `eth0` interface, showing details such as whether 
   it's up, its IP address, and other relevant information.

### Example Output

If you run the command:

ubus call network.interface status '{"interface":"eth0"}'


You might get an output like this:

```json
{
    "up": true,
    "pending": false,
    "available": true,
    "autostart": true,
    "dynamic": false,
    "uptime": 3600,
    "l3_device": "eth0",
    "proto": "static",
    "device": "eth0",
    "updated": [
        "addresses"
    ],
    "metric": 0,
    "dns_metric": 0,
    "delegation": true,
    "ipv4-address": [
        {
            "address": "192.168.1.1",
            "mask": 24
        }
    ],
    "ipv6-address": [],
    "ipv6-prefix": [],
    "ipv6-prefix-assignment": [],
    "route": [],
    "dns-server": [],
    "dns-search": [],
    "neighbors": [],
    "inactive": false,
    "data": {
    }
}
```

### Explanation

- `ubus call network.interface status`: 
 This is calling the `status` method on 
 the `network.interface` service.
 
- `{"interface":"eth0"}`: This is the JSON input, 
specifying that you want the status of the `eth0` interface.

- The output provides detailed information about 
the `eth0` interface, 
such as its IP address, whether it's up, and other 
configuration details.

### Summary
Using `ubus`, you can interact with various services on 
OpenWrt in a standardized way. 
This example shows how you can retrieve the status of 
a network interface using simple commands. 
You can use similar methods to interact with other services and 
perform actions like configuring settings, 
fetching system information, 
or even restarting services.


Problem Example:
### Problem Description

You are managing a router running OpenWrt with three network interfaces: 
`eth0`, `eth1`, and `wlan0`. 
You want to calculate the **total uptime** 
of these interfaces using `ubus`. 
Each interface has been up for different periods. 
Using `ubus`, you will retrieve the uptime for each interface and 
then sum them up to get the total uptime in 
seconds.

### Quantitative Example

- `eth0` uptime: 3600 seconds (1 hour)
- `eth1` uptime: 7200 seconds (2 hours)
- `wlan0` uptime: 5400 seconds (1.5 hours)

The task is to calculate the total uptime of these interfaces.

### Solution

1. **Use `ubus` to Get Uptime Data for Each Interface**:

   - Use `ubus` to call the `status` method on each interface (similar to what was shown in previous examples):

     ```bash
     ubus call network.interface status '{"interface":"eth0"}'
     ubus call network.interface status '{"interface":"eth1"}'
     ubus call network.interface status '{"interface":"wlan0"}'
     ```

   Each command returns a JSON object with the interface's status, including its uptime in seconds.

2. **Extract Uptime Data**:

   Let's assume the responses look like this:

   - **eth0**:
     ```json
     {
         "uptime": 3600
     }
     ```

   - **eth1**:
     ```json
     {
         "uptime": 7200
     }
     ```

   - **wlan0**:
     ```json
     {
         "uptime": 5400
     }
     ```

3. **Calculate the Total Uptime**:

   To find the total uptime of all interfaces, sum the uptime
   values of each interface:
   
   Total Uptime = 3600 seconds + 7200 seconds + 5400 seconds
   Total Uptime = 16200 seconds


4. **Convert to Hours (Optional)**:

   If you want to express the total uptime in hours:

   \[
   \text{Total Uptime in Hours} = \frac{16200 \, \text{seconds}}{3600 \, \text{seconds/hour}} = 4.5 \, \text{hours}
   \]

### Final Answer

The total uptime of the three network interfaces (`eth0`, `eth1`, and `wlan0`) 
is **16,200 seconds** or **4.5 hours**.


###Ubus Example - programmatic:
Basic example of using `ubus` programmatically in a Lua script. 
Lua is commonly used in OpenWrt for scripting, so 
this example will demonstrate how you can interact with `ubus` from 
within a Lua script to retrieve the status of a network interface.

### Prerequisites

Ensure that you have `libubus-lua` installed on your OpenWrt device. 
This package allows you to interact with `ubus` using Lua.

### Lua Script Example

```lua
-- Load the ubus library
local ubus = require("ubus")

-- Connect to ubus
local conn = ubus.connect()
if not conn then
    error("Failed to connect to ubus")
end

-- Define the interface you want to query
local interface_name = "eth0"

-- Call the ubus method to get the status of the interface
local status = conn:call("network.interface", "status", { interface = interface_name })

-- Check if the status was successfully retrieved
if status then
    print("Interface:", interface_name)
    print("Status:", status.up and "UP" or "DOWN")
    print("IP Address:", status["ipv4-address"] and status["ipv4-address"][1]["address"] or "N/A")
    print("Uptime:", status.uptime and status.uptime .. " seconds" or "N/A")
else
    print("Failed to retrieve status for interface:", interface_name)
end

-- Disconnect from ubus
conn:close()
```

### Explanation

1. **Load the `ubus` library**:  
   The script begins by loading the `ubus` library using 
   `require("ubus")`.

2. **Connect to `ubus`**:  
   The script establishes a connection to `ubus` using 
   `ubus.connect()`. If the connection fails, 
   the script throws an error.

3. **Define the network interface**:  
   The script specifies the network interface 
   (`eth0` in this case) whose status you want to query.

4. **Call the `ubus` method**:  
   The `conn:call` function is used to call the `status` 
   method on the `network.interface` service. 
   The interface name is passed as a parameter in the form of a Lua table.

5. **Process the response**:  
   The script checks if the status was 
   successfully retrieved. 
   If so, it prints out details such as whether the interface is up, 
   its IP address, and its uptime. If the call fails, it prints an 
   error message.

6. **Disconnect from `ubus`**:  
   Finally, the script closes the connection to `ubus`.

### Running the Script

You can save this script to a file, for example, 
`check_interface.lua`, and run it on your OpenWrt device using Lua:

```bash
lua /path/to/check_interface.lua
```

### Example Output

If the interface `eth0` is up, you might see output like:

```
Interface: eth0
Status: UP
IP Address: 192.168.1.1
Uptime: 3600 seconds
```

This simple script shows how you can programmatically interact with `ubus` to retrieve information and control services on OpenWrt using Lua. You can expand on this script to perform more complex operations, such as configuring interfaces, monitoring network statistics, or managing other system services.




